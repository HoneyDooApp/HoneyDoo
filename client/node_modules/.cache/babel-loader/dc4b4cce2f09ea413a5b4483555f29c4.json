{"ast":null,"code":"var _jsxFileName = \"/Users/codex/Desktop/bootcamp/Bootcamp_coding/HoneyDoo/client/src/utils/GlobalStore.js\";\nimport React, { createContext, useReducer, useContext } from \"react\"; // any variables we depend on for UI/flow we must pre-set\n\nconst initialData = {\n  authOk: false,\n  name: \"\",\n  tasks: [],\n  alert: \"\"\n};\n/*! IMPORTANT all your reducer functionality goes here */\n\nconst dataReducer = (state, action) => {\n  switch (action.type) {\n    case \"USER_LOGIN\":\n      return { ...state,\n        ...action.data,\n        alert: action.message || '',\n        authOk: true\n      };\n\n    case \"USER_LOGOUT\":\n      // needed to force this reload (else it just refreshed with invalid content)\n      delete localStorage.session;\n      window.location.href = '/login';\n      return { ...initialData,\n        alert: action.message || ''\n      };\n\n    case \"ALERT_MESSAGE\":\n      return { ...state,\n        alert: action.message\n      };\n\n    case \"ALERT_CLEAR\":\n      return { ...state,\n        alert: ''\n      };\n\n    case \"UPDATE_TASKS\":\n      return { ...state,\n        tasks: action.tasks,\n        alert: action.message || ''\n      };\n\n    default:\n      console.log(`Invalid action type: ${action.type}`);\n      return state;\n  }\n};\n\nconst StoreContext = createContext();\n\nconst useStoreContext = function () {\n  return useContext(StoreContext);\n};\n\nconst StoreProvider = function (props) {\n  const [state, dispatch] = useReducer(dataReducer, initialData);\n  return /*#__PURE__*/React.createElement(StoreContext.Provider, Object.assign({\n    value: [state, dispatch]\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 10\n    }\n  }));\n};\n\nexport { StoreProvider, useStoreContext };","map":{"version":3,"sources":["/Users/codex/Desktop/bootcamp/Bootcamp_coding/HoneyDoo/client/src/utils/GlobalStore.js"],"names":["React","createContext","useReducer","useContext","initialData","authOk","name","tasks","alert","dataReducer","state","action","type","data","message","localStorage","session","window","location","href","console","log","StoreContext","useStoreContext","StoreProvider","props","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,UAA3C,QAA6D,OAA7D,C,CAEA;;AACA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,MAAM,EAAE,KADU;AACHC,EAAAA,IAAI,EAAE,EADH;AACOC,EAAAA,KAAK,EAAE,EADd;AACkBC,EAAAA,KAAK,EAAE;AADzB,CAApB;AAIA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,YAAL;AACE,aAAO,EAAE,GAAGF,KAAL;AAAY,WAAGC,MAAM,CAACE,IAAtB;AAA4BL,QAAAA,KAAK,EAAEG,MAAM,CAACG,OAAP,IAAkB,EAArD;AAAyDT,QAAAA,MAAM,EAAE;AAAjE,OAAP;;AACF,SAAK,aAAL;AACE;AACA,aAAOU,YAAY,CAACC,OAApB;AACAC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;AACA,aAAO,EAAE,GAAGf,WAAL;AAAkBI,QAAAA,KAAK,EAAEG,MAAM,CAACG,OAAP,IAAkB;AAA3C,OAAP;;AACF,SAAK,eAAL;AACE,aAAO,EAAE,GAAGJ,KAAL;AAAYF,QAAAA,KAAK,EAAEG,MAAM,CAACG;AAA1B,OAAP;;AACF,SAAK,aAAL;AACE,aAAO,EAAE,GAAGJ,KAAL;AAAYF,QAAAA,KAAK,EAAE;AAAnB,OAAP;;AACF,SAAK,cAAL;AACE,aAAO,EAAE,GAAGE,KAAL;AAAYH,QAAAA,KAAK,EAAEI,MAAM,CAACJ,KAA1B;AAAiCC,QAAAA,KAAK,EAAEG,MAAM,CAACG,OAAP,IAAkB;AAA1D,OAAP;;AACF;AACEM,MAAAA,OAAO,CAACC,GAAR,CAAa,wBAAuBV,MAAM,CAACC,IAAK,EAAhD;AACA,aAAOF,KAAP;AAhBJ;AAkBD,CAnBD;;AAuBA,MAAMY,YAAY,GAAGrB,aAAa,EAAlC;;AAEA,MAAMsB,eAAe,GAAG,YAAU;AAChC,SAAOpB,UAAU,CAACmB,YAAD,CAAjB;AACD,CAFD;;AAIA,MAAME,aAAa,GAAG,UAASC,KAAT,EAAe;AACnC,QAAM,CAACf,KAAD,EAAQgB,QAAR,IAAoBxB,UAAU,CAAEO,WAAF,EAAeL,WAAf,CAApC;AACA,sBAAO,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE,CAACM,KAAD,EAAQgB,QAAR;AAA9B,KAAqDD,KAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAHD;;AAKA,SAASD,aAAT,EAAwBD,eAAxB","sourcesContent":["import React, { createContext, useReducer, useContext } from \"react\"\n\n// any variables we depend on for UI/flow we must pre-set\nconst initialData = {\n  authOk: false, name: \"\", tasks: [], alert: \"\"\n}\n\n/*! IMPORTANT all your reducer functionality goes here */\nconst dataReducer = (state, action) => {\n  switch (action.type) {\n    case \"USER_LOGIN\":\n      return { ...state, ...action.data, alert: action.message || '', authOk: true }\n    case \"USER_LOGOUT\":\n      // needed to force this reload (else it just refreshed with invalid content)\n      delete localStorage.session\n      window.location.href = '/login'\n      return { ...initialData, alert: action.message || '' }\n    case \"ALERT_MESSAGE\":\n      return { ...state, alert: action.message }\n    case \"ALERT_CLEAR\":\n      return { ...state, alert: '' }\n    case \"UPDATE_TASKS\":\n      return { ...state, tasks: action.tasks, alert: action.message || '' }\n    default:\n      console.log(`Invalid action type: ${action.type}`)\n      return state\n  }\n}\n\n\n\nconst StoreContext = createContext()\n\nconst useStoreContext = function(){\n  return useContext(StoreContext)\n}\n\nconst StoreProvider = function(props){\n  const [state, dispatch] = useReducer( dataReducer, initialData )\n  return <StoreContext.Provider value={[state, dispatch]} {...props} />\n}\n\nexport { StoreProvider, useStoreContext }"]},"metadata":{},"sourceType":"module"}